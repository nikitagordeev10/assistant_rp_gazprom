# -*- coding: utf-8 -*-
"""gazprom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ytkQsOJrO-Dr1_xLvA7nsQ6HLZTwEViw
"""

!pip install python-docx #<-- Yes you can directly install in Colab
!pip install textract
import textract
import docx
from google.colab import files
from docx import Document
import codecs
import re
import json

# Преобразование word to txt

filepath = r"Протокол совещания_24.04.11.docx"
document = Document(filepath)

with codecs.open('status_1.txt', 'w', "utf-8-sig") as o_file:
    for para in document.paragraphs:
        text = re.sub(r'\n{2,}', '\n', para.text)
        o_file.write(text + '\n')

# Удаляем весь текст до части "РЕШИЛИ"
def save_text_after_keyword(input_file, keyword, output_file):
    with open(input_file, 'r') as f:
        lines = f.readlines()

    found = False
    text_after_keyword = []

    for line in lines:
        if found:
            text_after_keyword.append(line)
        elif keyword in line:
            found = True

    with open(output_file, 'w') as f:
        f.writelines(text_after_keyword)

# Пример использования
input_file = "status_1.txt"
keyword = "РЕШИЛИ:"
output_file = "status_2.txt"

save_text_after_keyword(input_file, keyword, output_file)

# Чистим подготовленный txt файл от переносов
# Открываем файл и считываем его содержимое
with open('status_2.txt', 'r') as file:
    text = file.read()

# Заменяем два и более переноса строк на один
text = re.sub(r'\n{2,}', '\n', text)

# Записываем измененный текст обратно в файл
with open('status_3.txt', 'w') as file:
    file.write(text)

def process_file(file_path, output_file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    with open(output_file_path, 'w', encoding='utf-8') as output_file:
        i = 0
        while i < len(lines):
            line = lines[i].strip()

            if line.startswith("В части Проекта"):
                output_file.write("Заголовок: " + line + "\n")
                i += 1
                if i < len(lines) and lines[i].strip().startswith("Ответственный:"):
                    # Нет дополнительных строк между
                    pass
                elif (i + 1 < len(lines) and
                      not lines[i+1].strip().startswith("Ответственный:")):
                    # Две строки до "Ответственный:"
                    output_file.write("Подзаголовок: " + lines[i].strip() + "\n")
                    i += 1
                    output_file.write("Задача: " + lines[i].strip() + "\n")
                elif i < len(lines) and not lines[i].strip().startswith("Ответственный:"):
                    # Одна строка до "Ответственный:"
                    output_file.write("Задача: " + lines[i].strip() + "\n")

            elif line.startswith("Срок"):
                output_file.write(line + "\n")
                i += 1
                if i < len(lines) and lines[i].strip().startswith("В части Проекта"):
                    # Возвращаемся к нормальной обработке с "В части Проекта"
                    continue
                elif i < len(lines) and not lines[i].strip().startswith("Ответственный:"):
                    next_line = lines[i].strip()
                    if (i + 1 < len(lines) and
                        not lines[i+1].strip().startswith("Ответственный:")):
                        output_file.write("Подзаголовок: " + next_line + "\n")
                        i += 1
                        output_file.write("Задача: " + lines[i].strip() + "\n")
                    else:
                        output_file.write("Задача: " + next_line + "\n")

            elif line.startswith("Ответственный:"):
                output_file.write(line + "\n")

            else:
                output_file.write(line + "\n")

            i += 1

filename = 'status_3.txt'
output_filename = 'status_4.txt'
process_file(filename, output_filename)

def parse_tasks(text):
    projects = {}
    current_project = None
    current_subtitle = None

    lines = text.strip().split('\n')
    for line in lines:
        if line.startswith('Заголовок:'):
            current_project = re.search(r'Заголовок: (.+)', line).group(1)
            projects[current_project] = []
        elif line.startswith('Подзаголовок:'):
            current_subtitle = re.search(r'Подзаголовок: (.+)', line).group(1)
            projects[current_project].append({current_subtitle: []})
        elif line.startswith('Задача:'):
            task = re.search(r'Задача: (.+)', line).group(1)
            responsible_match = re.search(r'Ответственный: (.+)', lines[lines.index(line) + 1])
            responsible = responsible_match.group(1) if responsible_match else None
            deadline_match = re.search(r'Срок: (.+)', lines[lines.index(line) + 2])
            deadline = deadline_match.group(1) if deadline_match else None
            if current_subtitle:
                projects[current_project][-1][current_subtitle].append({
                    "Задача": task,
                    "Ответственный": responsible,
                    "Срок": deadline
                })
            else:
                projects[current_project].append({
                    "Задача": task,
                    "Ответственный": responsible,
                    "Срок": deadline
                })

    return projects

if __name__ == "__main__":
    with open('status_4.txt', 'r', encoding='utf-8') as file:
        text = file.read()

    parsed_data = parse_tasks(text)
    with open('status_5.json', 'w', encoding='utf-8') as json_file:
        json.dump(parsed_data, json_file, indent=2, ensure_ascii=False)

#TODO - сортировка по предприятию
# todo - убрать заголовки, сделать в одну таблицу

import json
from tabulate import tabulate

def process_data(data):
    for section_title, tasks in data.items():
        print(section_title)
        for task in tasks:
            if isinstance(task, dict):
                task = [task]
            if "Задача" in task[0]:
                headers = ["Задача", "Ответственный", "Срок"]
                table = [[t["Задача"], t["Ответственный"], t["Срок"]] for t in task]
                print(tabulate(table, tablefmt="pretty"))
            else:
                for sub_title, sub_tasks in task[0].items():
                    print(sub_title)
                    headers = ["Задача", "Ответственный", "Срок"]
                    table = [[t["Задача"], t["Ответственный"], t["Срок"]] for t in sub_tasks]
                    print(tabulate(table, tablefmt="pretty"))

with open("status_5.json", "r", encoding="utf-8") as file:
    data = json.load(file)

with open('status_6.txt', 'w', encoding='utf-8') as json_file:
        json.dump(parsed_data, json_file, indent=2, ensure_ascii=False)

process_data(data)

Сделай вывод такой
Задача: Обеспечить получение от АО «ВНИИГ» получение информации по срокам предоставления объемов демонтажа на основании данных по фундаменту, полученных от АО «УТЗ».
---
Ответственный: Д.В. Громак
---
Срок: 19.04.2024 (05.04.2024)

и перенос строки

"""### Перегрупировка json для ответственного"""

## todo - правильно указывать Подпроект

import json

def reformat_json(input_json):
    output_json = {}

    for project, tasks in input_json.items():
        for task in tasks:
            if isinstance(task, dict):
                responsible = task.get("Ответственный", "-")
                deadline = task.get("Срок", "-")
                task_name = task.get("Задача", "-")
                project_name = project
                subproject_name = "-"

                task_obj = {
                    "Задача": task_name,
                    "Срок": deadline,
                    "Проект": project,
                    "Подпроект": "-"
                }

                if isinstance(list(task.values())[0][0], dict):
                    subproject_name = list(task.keys())[0]
                    project_name = project.split("В части Проекта ")[-1]
                    task_obj["Проект"] = project_name
                    task_obj["Подпроект"] = subproject_name

                output_json[responsible] = output_json.get(responsible, []) + [task_obj]

            elif isinstance(task, list):
                for subproject, sub_tasks in task[0].items():
                    for sub_task in sub_tasks:
                        responsible = sub_task.get("Ответственный", "-")
                        deadline = sub_task.get("Срок", "-")
                        task_name = sub_task.get("Задача", "-")
                        project_name = project
                        subproject_name = subproject

                        task_obj = {
                            "Задача": task_name,
                            "Срок": deadline,
                            "Проект": project,
                            "Подпроект": subproject_name
                        }

                        output_json[responsible] = output_json.get(responsible, []) + [task_obj]

    return output_json


with open('status_5.json', 'r', encoding='utf-8') as file:
    input_json = json.load(file)

reformatted_json = reformat_json(input_json)
print(json.dumps(reformatted_json, indent=2, ensure_ascii=False))

#todo - вывод таблицы ответственные

#todo my sql

#todo редактирование